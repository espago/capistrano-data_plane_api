# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `data_plane_api` gem.
# Please instead update this file by running `bin/tapioca gem data_plane_api`.


# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `data_plane_api` gem.
# Please instead update this file by running `spoom srb sigs export`.

# Contains code which implements a subset of the
# HAProxy Data Plane API.
#
# source://data_plane_api//lib/data_plane_api/version.rb#3
# Contains code which implements a subset of the
module DataPlaneApi
  class << self
    # : { (Configuration) -> void } -> Configuration
    #
    # source://data_plane_api//lib/data_plane_api.rb#17
    sig do
      params(
        block: T.proc.params(arg0: ::DataPlaneApi::Configuration).void
      ).returns(::DataPlaneApi::Configuration)
    end
    def configure(&block); end
  end
end

# source://data_plane_api//lib/data_plane_api.rb#13
DataPlaneApi::CONFIG = T.let(T.unsafe(nil), DataPlaneApi::Configuration)

# Stores configuration options for the HAProxy Data Plane API.
#
# source://data_plane_api//lib/data_plane_api/configuration.rb#10
class DataPlaneApi::Configuration
  # : (String | URI::Generic | nil, bool, bool, String?, String?, Logger?, Integer?, Configuration?) -> void
  #
  # @param global: whether this object is used as a global store of settings
  # @param basic_user: Basic Auth username.
  # @param basic_password: Basic Auth password.
  # @return [Configuration] a new instance of Configuration
  #
  # source://data_plane_api//lib/data_plane_api/configuration.rb#36
  def initialize(url: T.unsafe(nil), global: T.unsafe(nil), mock: T.unsafe(nil), basic_user: T.unsafe(nil), basic_password: T.unsafe(nil), logger: T.unsafe(nil), timeout: T.unsafe(nil), parent: T.unsafe(nil)); end

  # Basic Auth password.
  # : -> String?
  #
  # source://data_plane_api//lib/data_plane_api/configuration.rb#91
  # Basic Auth password.
  sig { returns(T.nilable(::String)) }
  def basic_password; end

  # Basic Auth password.
  # : String?
  #
  # source://data_plane_api//lib/data_plane_api/configuration.rb#18
  def basic_password=(_arg0); end

  # Basic Auth username.
  # : -> String?
  #
  # source://data_plane_api//lib/data_plane_api/configuration.rb#83
  # Basic Auth username.
  sig { returns(T.nilable(::String)) }
  def basic_user; end

  # Basic Auth username.
  # : String?
  #
  # source://data_plane_api//lib/data_plane_api/configuration.rb#15
  def basic_user=(_arg0); end

  # : -> Faraday::Connection
  #
  # source://data_plane_api//lib/data_plane_api/configuration.rb#64
  sig { returns(::Faraday::Connection) }
  def connection; end

  # : -> void
  #
  # source://data_plane_api//lib/data_plane_api/configuration.rb#69
  sig { void }
  def freeze; end

  # Whether this object is used as a global store of settings
  #
  # : bool
  #
  # source://data_plane_api//lib/data_plane_api/configuration.rb#30
  # Whether this object is used as a global store of settings
  sig { returns(T::Boolean) }
  def global; end

  # : -> Logger?
  #
  # source://data_plane_api//lib/data_plane_api/configuration.rb#98
  sig { returns(T.nilable(::Logger)) }
  def logger; end

  # : Logger?
  #
  # source://data_plane_api//lib/data_plane_api/configuration.rb#20
  def logger=(_arg0); end

  # : -> bool?
  #
  # source://data_plane_api//lib/data_plane_api/configuration.rb#112
  def mock; end

  # Do not make HTTP requests, just log them
  #
  # : bool
  #
  # source://data_plane_api//lib/data_plane_api/configuration.rb#26
  def mock=(_arg0); end

  # : -> bool
  #
  # @return [Boolean]
  #
  # source://data_plane_api//lib/data_plane_api/configuration.rb#119
  def mock?; end

  # : -> Configuration?
  #
  # source://data_plane_api//lib/data_plane_api/configuration.rb#124
  sig { returns(T.nilable(::DataPlaneApi::Configuration)) }
  def parent; end

  # : -> Integer?
  #
  # source://data_plane_api//lib/data_plane_api/configuration.rb#105
  sig { returns(T.nilable(::Integer)) }
  def timeout; end

  # : Integer?
  #
  # source://data_plane_api//lib/data_plane_api/configuration.rb#22
  def timeout=(_arg0); end

  # : -> (String | URI::Generic | nil)
  #
  # source://data_plane_api//lib/data_plane_api/configuration.rb#75
  sig { returns(T.nilable(T.any(::String, ::URI::Generic))) }
  def url; end

  # : String | URI::Generic | nil
  #
  # source://data_plane_api//lib/data_plane_api/configuration.rb#12
  def url=(_arg0); end

  private

  # : -> Faraday::Connection
  #
  # source://data_plane_api//lib/data_plane_api/configuration.rb#134
  # Faraday 1.x compatibility
  sig { returns(::Faraday::Connection) }
  def build_connection; end
end

# source://data_plane_api//lib/data_plane_api.rb#11
class DataPlaneApi::Error < ::StandardError; end

# Wraps endpoints regarding HAProxy servers.
#
# source://data_plane_api//lib/data_plane_api/server.rb#8
module DataPlaneApi::Server
  class << self
    # : (String?, String?, Configuration?) -> Faraday::Response?
    #
    # @param backend: Name of the backend
    # @param name: Name of the server whose settings will be returned.
    #   If `nil` then an array of settings of all servers under the passed `backend`
    #   will be returned.
    #
    # source://data_plane_api//lib/data_plane_api/server.rb#18
    sig do
      params(
        backend: T.nilable(::String),
        name: T.nilable(::String),
        config: T.nilable(::DataPlaneApi::Configuration)
      ).returns(::Faraday::Response)
    end
    def get_runtime_settings(backend:, name: T.unsafe(nil), config: T.unsafe(nil)); end

    # : (String?, String?, Hash[top, top], Configuration?) -> Faraday::Response?
    #
    # @param backend: Name of the backend
    # @param name: Name of the server whose transient settings should be updated.
    # @raise [::ArgumentError]
    #
    # source://data_plane_api//lib/data_plane_api/server.rb#34
    sig do
      params(
        backend: T.nilable(::String),
        name: T.nilable(::String),
        settings: T::Hash[T.anything, T.anything],
        config: T.nilable(::DataPlaneApi::Configuration)
      ).returns(::Faraday::Response)
    end
    def update_transient_settings(backend:, name:, settings:, config: T.unsafe(nil)); end

    private

    # : (String, Faraday::Request, Faraday::Response?, Logger?) -> void
    #
    # source://data_plane_api//lib/data_plane_api/server.rb#73
    def log_communication(url, request, response, logger:); end

    # : (Symbol, String | Pathname, Configuration) { (Faraday::Request) -> void } -> Faraday::Response?
    #
    # source://data_plane_api//lib/data_plane_api/server.rb#52
    sig do
      params(
        method: ::Symbol,
        path: T.any(::Pathname, ::String),
        config: ::DataPlaneApi::Configuration,
        block: T.proc.params(arg0: ::Faraday::Request).void
      ).returns(::Faraday::Response)
    end
    def send_request(method:, path:, config:, &block); end
  end
end

# source://data_plane_api//lib/data_plane_api/server.rb#9
DataPlaneApi::Server::ADMIN_STATES = T.let(T.unsafe(nil), Set)

# source://data_plane_api//lib/data_plane_api/server.rb#10
DataPlaneApi::Server::OPERATIONAL_STATES = T.let(T.unsafe(nil), Set)

# source://data_plane_api//lib/data_plane_api/version.rb#4
DataPlaneApi::VERSION = T.let(T.unsafe(nil), String)
